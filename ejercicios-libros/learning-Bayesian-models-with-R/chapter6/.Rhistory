library(brnn)
mpgdataall <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
colnames(mpgdataall) <- c("mpg", "cylinders", "displacement",
"horsepower", "weight", "acceleration", "model.year", "origin", "car.name")
mpgdata <- mpgdataall[,c(1,3,5,6)]
#Fitting Bayesian NN Model
ytrain <- mpgdata[1:100,1]
xtrain <- as.matrix(mpgdata[1:100,2:4])
View(xtrain)
View(mpgdataall)
View(mpgdata)
mpg_brnn <- brnn(xtrain,ytrain,neurons=2,normalize = TRUE,epochs = 1000)
summary(mpg_brnn)
ytest <- mpgdata[101:150,1]
xtest <- as.matrix(mpgdata[101:150,2:4])
ypred_brnn <- predict.brnn(mpg_brnn,xtest)
plot(ytest,ypred_brnn)
err <-ytest-ypred
err <- ytest - ypred_brnn
summary(err)
cor(ytest, ypred_brnn)
cor(ytest, ypred_brnn) ^ 2
install.packages("darch")
library(darch)
darch <- newDArch(c(2,4,1),batchSize = 2,genWeightFunc = generateWeights)
?darch
darch <- darch(c(2,4,1),batchSize = 2,genWeightFunc = generateWeights)
darch <- newDarch(c(2,4,1),batchSize = 2,genWeightFunc = generateWeights)
?newDArch
darch <- newDarch(c(2,4,1),batchSize = 2,genWeightFunc = generateWeights)
darch <- newDArch(c(2,4,1),batchSize = 2,genWeightFunc = generateWeights)
inputs <- matrix(c(0,0,0,1,1,0,1,1),ncol=2,byrow=TRUE)
outputs <- matrix(c(0,1,1,0),nrow=4)
inputs
outputs
plot(inputs[,1], inputs[,2])
darch <- preTrainDArch(darch,inputs,maxEpoch=1000)
?preTrainDArch
require(darch)
?preTrainDArch
darch <- preTrainDArch(darch,inputs,maxEpoch=1000)
?DArch
?newDArch
find(newDArch)
find("newDArch")
findFn("newDArch")
findFn(newDArch)
library(darch)
darch <- newDArch(c(2,4,1),batchSize = 2,genWeightFunc = generateWeights)
nsquare <- function(n){return(n*n)}
range <- c(1:100000)
system.time(lapply(range,nsquare))
library(parallel)
numCores<-detectCores( ) #to find the number of cores in the
numCores
numCores
system.time(mclapply(range,nsquare,mc.cores=numCores))
install.packages(foreach)#one time
install.packages("foreach")#one time
install.packages(doParallel)#one time
install.packages("doParallel")#one time
library(foreach)
library(doParallel)
system.time(foreach(i=1:100000) %do% i^2) #for executing
