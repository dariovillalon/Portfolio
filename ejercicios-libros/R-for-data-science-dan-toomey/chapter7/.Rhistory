matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
plot(x)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
plot(x)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
plot(x)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
plot(x)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
plot(x)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
plot(x)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
plot(x)
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15,c("clusters","sumsquares")))
for(i in 2:15) {
fit <- kmeans(x,i)
results[i-1,1] <- i
results[i-1,2] <- fit$totss
}
plot(results)
fit <- kmeans(x, 2)
fit$totss
fit <- kmeans(x, 5)
fit$totss
?kmeans
fit <- kmeans(x, centers = 10)
fit
fit$totss
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15,c("clusters","sumsquares")))
for(i in 2:15) {
fit <- kmeans(x, centers = i)
results[i-1,1] <- i
results[i-1,2] <- fit$totss
}
plot(results)
plot(results, type = "l")
?kmeans
x
plot(x)
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15,c("clusters","sumsquares")))
for(i in 2:15) {
fit <- kmeans(x, centers = i)
results[i-1,1] <- i
results[i-1,2] <- fit$betweenss
}
plot(results, type = "l")
results <- matrix(nrow=50, ncol=2, dimnames=list(2:50,c("clusters","sumsquares")))
results <- matrix(nrow=50, ncol=2, dimnames=list(2:51,c("clusters","sumsquares")))
for(i in 2:50) {
fit <- kmeans(x, centers = i)
results[i-1,1] <- i
results[i-1,2] <- fit$betweenss
}
plot(results, type = "l")
results
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15,c("clusters","sumsquares")))
for(i in 2:15) {
fit <- kmeans(x, centers = i)
results[i-1,1] <- i
results[i-1,2] <- fit$totss
}
plot(results, type = "l")
for(i in 2:15) {
fit <- kmeans(x, centers = i)
print(fit$totss)
results[i-1,1] <- i
results[i-1,2] <- fit$totss
}
for(i in 2:15) {
fit <- kmeans(x, centers = i)
print(fit$withinss)
results[i-1,1] <- i
results[i-1,2] <- fit$totss
}
for(i in 2:15) {
fit <- kmeans(x, centers = i)
print(fit$tot.withinss)
results[i-1,1] <- i
results[i-1,2] <- fit$totss
}
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15,c("clusters","sumsquares")))
for(i in 2:15) {
fit <- kmeans(x, centers = i)
results[i-1,1] <- i
results[i-1,2] <- fit$tot.withinss
}
plot(results, type = "l")
df$x <- c(1, 2, 1, 2, 1, 3, 2, 2, 3)
df["x"] <- c(1, 2, 1, 2, 1, 3, 2, 2, 3)
x <- c(1, 2, 1, 2, 1, 3, 2, 2, 3)
y <- c(10, 11, 10, 12, 4, 5, 6, 5, 6)
df <- data.frame(x, y)
View(df)
plot(df)
library(cluster)
result <- pam(df, 2, FALSE, "euclidean")
result
summary(result)
plot(result$data, col = result$clustering)
Object <- 1:9
x <- c(1, 2, 1, 2, 1, 3, 2, 2, 3)
y <- c(10, 11, 10, 12, 4, 5, 6, 5, 6)
df <- data.frame(x, y, Object)
plot(df)
library(cluster)
result <- pam(df, 2, FALSE, "euclidean")
result
summary(result)
plot(result$data, col = result$clustering)
result <- pam(df, 2, FALSE, "euclidean")
result
summary(result)
plot(result$data, col = result$clustering)
x <- rnorm(100)
plot(x)
summary(x)
boxplot.stats(x)$out
x <- rnorm(100)
plot(x)
summary(x)
boxplot.stats(x)$out
boxplot(x)
boxplot(mpg~cyl,data=mtcars, xlab="Cylinders", ylab="MPG")
x <- rnorm(1000)
y <- rnorm(1000)
f <- data.frame(x,y)
View(f)
a <- boxplot.stats(x)$out
a
b <- boxplot.stats(y)$out
list <- union(a,b)
a <- boxplot.stats(x)$out
b <- boxplot.stats(y)$out
list <- union(a,b)
plot(f)
px <- f[f$x %in% a,]
py <- f[f$y %in% b,]
p <- rbind(px,py)
par(new=TRUE)
plot(p$x, p$y,cex=2,col=2)
data <- data(iris)
data <- iris
outliers <- function(data, low, high) {
outs <- subset(data, data$Sepal.Length < low | data$Sepal.Length > high)
return(outs)
}
outliers(data, 4.5, 7.5)
install.packages("DMwR")
library(DMwR)
nospecies <- data[,1:4]
scores <- lofactor(nospecies, k=3)
scores
plot(density(scores))
install.packages("arules")
library(arules)
data <- read.csv("http://www.salemmarafi.com/wp-content/uploads/2014/03/groceries.csv")
View(data)
data <- read.csv("http://www.salemmarafi.com/wp-content/uploads/2014/03/groceries.csv", header = FALSE)
rules <- apriori(data)
rules
inspect(rules)
data <- read.transactions("http://www.salemmarafi.com/wp-content/uploads/2014/03/groceries.csv", header = FALSE)
data <- read.transactions("http://www.salemmarafi.com/wp-content/uploads/2014/03/groceries.csv")
data
rules <- apriori(data)
rules
inspect(rules)
data <- read.csv("http://www.salemmarafi.com/wp-content/uploads/2014/03/groceries.csv", header = FALSE)
rules <- apriori(data)
rules
inspect(rules)
rules <- apriori(data, parameter = list(supp = 0.001, conf = 0.8))
inspect(rules)
install.packages("arules")
install.packages("arules")
library(arules)
data("Adult")
head(Adult)
inspect(Adult)
dim(Adult)
summary(Adult)
itemsets <- eclat(Adult)
itemsets.sorted <- sort(itemsets)
itemsets.sorted[1:5]
inspect(itemsets.sorted[1:5])
itemsets <- eclat(Adult, parameter=list(minlen=9))
inspect(itemsets)
data(Agrawal)
data("Agrawal")
install.packages("arulesNBMiner")
library(arulesNBMiner)
data("Agrawal")
summary(Agrawal.db)
summary(Agrawal.pat)
mynbparameters <- NBMinerParameters(Agrawal.db)
mynbminer <- NBMiner(Agrawal.db, parameter = mynbparameters)
summary(mynbminer)
tr <- read.transactions("http://fimi.ua.ac.be/data/retail.dat",
format="basket")
summary(tr)
itemFrequencyPlot(tr, support=0.1)
rules <- apriori(tr, parameter=list(supp=0.5,conf=0.5))
summary(rules)
inspect(rules)
interestMeasure(rules, c("support", "chiSquare", "confidence",
"conviction", "cosine", "leverage", "lift", "oddsRatio"), tr)
install.packages("TraMineR")
library(TraMineR)
data(mvad)
View(mvad)
summary(mvad)
myseq <- seqdef(mvad, 17:86)
seqiplot(myseq)
seqfplot(myseq)
seqdplot(myseq)
seqHtplot(myseq)
myturbulence <- seqSt(myseq)
myturbulence <- seqST(myseq)
hist(myturbulence)
data(famform)
View(famform)
seq <- seqdef(famform)
seqLLCP(seq[3,],seq[4,])
seqLLCS(seq[1,],seq[2,])
cost <- seqsubm(seq, method="CONSTANT", cval=2)
cost <- seqsubm(seq, method="CONSTANT", cval=2)
cost
path <- "state-of-the-union.txt"
install.packages("tm")
library(tm)
library(tm)
install.packages("slam")
library(slam)
setRepositories()
install.packages("tm")
library(tm)
ap <- available.packages()
View(ap)
"slam" %in% rownames(ap)
install.packages("slam", dependencies=TRUE, repos='http://cran.rstudio.com/')
setRepositories()
install.packages("slam", dependencies=TRUE, repos='http://cran.rstudio.com/')
options(download.file.method = "wget")
install.packages("slam", dependencies=TRUE, repos='http://cran.rstudio.com/')
options(download.file.method = "curl")
install.packages("slam", dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("tm", dependencies = TRUE)
library(tm)
install.packages("RTools")
chooseCRANmirror()
install.packages("tm", dependencies = TRUE)
install.packages("tm")
chooseCRANmirror()
install.packages("tm")
library(tm)
chooseCRANmirror()
install.packages("tm")
library(tm)
require(slam)
install.packages("tm")
chooseCRANmirror()
install.packages("tm")
chooseCRANmirror()
install.packages("tm")
chooseCRANmirror()
install.packages("tm")
install.packages("tm", repos = "https://cran.rstudio.com")
getwd()
getwd()
install.packages("tm", repos = "https://cran.rstudio.com")
install.packages("slam", repos = "https://cran.rstudio.com")
install.packages("installr")
setInternet2(TRUE)
installr::updateR()
installr::updateR()
data <- read.csv(choose.files(), header = TRUE)
data <- read.csv(choose.files(), header = TRUE, sep = ";")
View(data)
summary(data)
View(data)
data <- read.csv(choose.files(), header = TRUE, sep = ";",
col.names = c("Year", "SP500", "TBill3Mos", "TBond10Year"))
View(data)
summary(data)
data[,2:4] <- as.numeric(data[,2:4])
data <- read.csv(choose.files(), header = TRUE, sep = ";",
col.names = c("Year", "SP500", "TBill3Mos", "TBond10Year"),
stringsAsFactors = TRUE)
data <- read.csv(choose.files(), header = TRUE, sep = ";",
col.names = c("Year", "SP500", "TBill3Mos", "TBond10Year"),
stringsAsFactors = FALSE)
summary(data)
data[,2:4] <- as.numeric(data[,2:4])
data[,2:4] <- lapply(data[,2:4], as.numeric)
View(data)
data <- read.csv(choose.files(), header = TRUE, sep = ";",
col.names = c("Year", "SP500", "TBill3Mos", "TBond10Year"),
stringsAsFactors = FALSE)
data[,2:4] <- sapply(data[, 2:4], as.numeric)
View(data)
View(data)
data <- read.csv(choose.files(), header = TRUE, sep = ";",
col.names = c("Year", "SP500", "TBill3Mos", "TBond10Year"),
stringsAsFactors = FALSE)
str(data)
d <- data
str(d)
data <- read.csv(choose.files(), header = TRUE, sep = ";",
col.names = c("Year", "SP500", "TBill3Mos", "TBond10Year"),
stringsAsFactors = FALSE, dec = ",")
d <- data
str(d)
summary(data)
library(lattice)
splom(~data[2:4])
library(car)
scatterplotMatrix(data)
cor(data)
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(data)
plot(data$SP500,data$TBill3Mos)
abline(lm(data$TBill3Mos ~ data$TBond10Year))
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(cor(data), histogram=TRUE)
cov(data)
cor.test(data$SP500, data$TBill3Mos)
pairs(data)
getwd
getwwd()
getwd()
data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep=";")
library(cluster)
clusGap(data, kmeans, 15, B=100, verbose=interactive())
install.packages("pvclust")
library(pvclust)
pv <- pvclust(data)
pv
plot(pv)
install.packages("playwith")
library("playwith")
library("playwith")
data <- read.csv("https://archive.ics.uci.edu/ml/machine-learningdatabases/wine-quality/winequality-white.csv", sep=";")
data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep=";")
plot(data$fixed.acidity)
playwith(plot(data$fixed.acidity))
playwith(plot(data$fixed.acidity))
plot(data$fixed.acidity)
install.packages("playwith")
install.packages("playwith")
library("playwith")
plot(data$fixed.acidity)
playwith(plot(data$fixed.acidity))
install.packages("latticist")
library(latticist)
playwith(plot(data$fixed.acidity))
install.packages("latticist")
install.packages('latticist', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(latticist)
install.packages("latticist")
data <- read.csv("http://faculty.washington.edu/kenrice/sisg-adv/airportlocations.csv")
View(data)
summary(data)
install.packages("hexbin")
library(hexbin)
bin <- hexbin(data$Latitude,data$Longitude)
bin
summary(bin)
summary(bin)
plot(bin)
install.packages("mapdata")
library(mapdata)
map(database="usa", col="gray90", fill=TRUE)
library(maps)
library(maptools)
library(RColorBrewer)
install.packages("maptools")
install.packages("classInt")
install.packages("gpclib")
install.packages("gpclib", repos = "http://nbcgib.uesc.br/mirrors/cran/")
library(maps)
library(maptools)
library(RColorBrewer)
library(classInt)
library(gpclib)
library(mapdata)
version()
install.packages("gpclib")
setwd("D:\Google Drive\projects\R-for-data-science-dan-toomey\chapter7")
setwd("D:/Google Drive/projects/R-for-data-science-dan-toomey/chapter7")
install.packages("gpclib_1.5-5.tar.gz", repos = NULL, type = "source")
data <- read.csv("http://faculty.washington.edu/kenrice/sisg-adv/airportlocations.csv")
install.packages("maptools")
install.packages("classInt")
setwd("D:/Google Drive/projects/R-for-data-science-dan-toomey/chapter7")
install.packages("gpclib_1.5-5.tar.gz", repos = NULL, type = "source")
library(maps)
library(maptools)
library(RColorBrewer)
library(classInt)
library(gpclib)
library(mapdata)
library(maptools)
map("worldHires")
points(data$Longitude,data$Latitude,pch=16,col="red",cex=1)
require(graphics)
head(quakes)
mean(quakes$mag)
map()
points(quakes$long,quakes$lat,pch=".",col="red",cex=1)
lon <- mean(quakes$lon)
lat <- mean(quakes$lat)
orient <- c(lat,lon,0)
x <- c(min(quakes$lon)/2,max(quakes$lon)*1.5)
y <- c(min(quakes$lat)-10,max(quakes$lat)+10)
map(database= "world", ylim=y, xlim=x, col="grey80", fill=TRUE)
points(quakes$long,quakes$lat,pch=".",col="red",cex=quakes$mag/2)
library(RgoogleMaps)
install.packages("RgoogleMaps")
library(RgoogleMaps)
terrain <- GetMap(center=c(lat,lon),zoom=5,maptype="terrain",destfile="terrain.png",scale=c(320,320)
)
terrain <- GetMap(center=c(lat,lon),zoom=5,maptype="terrain",destfile="terrain.png")
terrain
plot(terrain)
markers <- cbind.data.frame(quakes$lat,quakes$long,"small","red","")
names(markers) <- c("lat","lon","size","col","char")
terrain <- GetMap.bbox(center=c(lat,lon),zoom=5,maptype="terrain",
destfile="terrain2.png",lonR=range(quakes$long),latR=range(quakes$lat),markers=markers)
qplot(lat,long,data=quakes,color=mag)
install.packages("ggplot2")
library(ggplot2)
qplot(lat,long,data=quakes,color=mag)
qplot(lat,long,data=quakes,color=mag,size=depth)
qplot(lat,long,data=quakes,color=mag,size=depth, alpha=0.5)
qplot(height,weight,data=women,geom="line")
qplot(School,data=painters,geom="bar")
install.packages("MASS")
library(MASS)
qplot(School,data=painters,geom="bar")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
data <- read.csv(url, sep=";")
ggplot(data, aes(x=residual.sugar, y=alcohol))
sa <- ggplot(data, aes(x=residual.sugar, y=alcohol))
sa
sa <- sa + geom_line()
sa
sa + facet_grid(. ~ quality)
sa + facet_grid(quality ~ .)
sa <- ggplot(data, aes(x=residual.sugar, y=alcohol))
sa <- sa + geom_line()
sa <- sa + geom_smooth()
sa
ggplot(data, aes(x=residual.sugar)) + geom_histogram(binwidth=.5)
ggplot(data, aes(x=residual.sugar)) + geom_density()
bp <- ggplot(data, aes(x=residual.sugar, y=alcohol))
bp <- bp + geom_boxplot()
bp + facet_grid(. ~ quality)
install.packages(c("car", "lattice", "gclus", "MASS", "ggplot2"))
install.packages(c("car", "lattice", "gclus", "MASS", "ggplot2"))
library(car)
library(lattice)
library(gclus)
library(MASS)
library(ggplot2)
data <- iris
colnames(data) <- c("sepal_length", "sepal_width", "petal_length",
"petal_width", "species")
summary(data)
plot(data$sepal_length, data$petal_length)
plot(data$sepal_length, data$petal_length, type="s")
plot(data$sepal_length, data$petal_length, type="h")
abline(lm(data$petal_length~data$sepal_length), col="red")
plot(data$sepal_length, data$petal_length)
abline(lm(data$petal_length~data$sepal_length), col="red")
lines(lowess(data$sepal_length,data$petal_length), col="blue")
scatterplot(data$sepal_length, data$petal_length)
pairs(data)
splom(data)
scatterplot.matrix(data)
scatterplotMatrix(data)
cpairs(data)
data.r <- abs(cor(data))
df <- subset(data, select = -c(species) )
df.r <- abs(cor(df))
df.col <- dmat.color(df.r)
df.o <- order.single(df.r)
cpairs(df, df.o, panel.colors=NULL)
cpairs(data)
data.r <- abs(cor(data))
df <- subset(data, select = -c(species) )
df.r <- abs(cor(df))
df.col <- dmat.color(df.r)
df.o <- order.single(df.r)
cpairs(df, df.o, panel.colors=NULL)
bin <- hexbin(data$sepal_length, data$petal_length)
summary(bin)
library(hexbin)
bin <- hexbin(data$sepal_length, data$petal_length)
summary(bin)
bin<-hexbin(data$sepal_length, data$petal_length, xbins=10)
summary(bin)
plot(bin)
