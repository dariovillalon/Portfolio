pad + display_cols * (example_width + pad))
displayData  <- function(X, example_width = round(sqrt(dim(X)[2])))  {
#DISPLAYDATA Display 2D data in a nice grid
#   [h, display_array] <- DISPLAYDATA(X, example_width) displays 2D data
#   stored in X in a nice grid. It returns the figure handle h and the
#   displayed array if requested.
if (is.vector(X))
X <- t(X)
# Compute rows, cols
m <- dim(X)[1]
n <- dim(X)[2]
example_height <- (n / example_width) #20
# Compute number of items to display
display_rows <- floor(sqrt(m)) #10
display_cols <- ceiling(m / display_rows) #10
# Between images padding
pad <- 1
# Setup blank display
display_array <-
-matrix(0,pad + display_rows * (example_height + pad),
pad + display_cols * (example_width + pad))
# Copy each example into a patch on the display array
curr_ex <- 1
for (j in 1:display_rows) {
for (i in 1:display_cols) {
if (curr_ex > m)
break
# Copy the patch
# Get the max value of the patch
max_val <- max(abs(X[curr_ex,]))
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height),
pad + (i - 1) * (example_width + pad) + (1:example_width)] <-
matrix(X[curr_ex,], example_height, example_width) / max_val
curr_ex <- curr_ex + 1
}
if (curr_ex > m)
break
}
# Display Image
op <- par(bg = "gray")
#image draws by row from bottom up, but R indexes matrices by column, top down
dispArr <- t(apply(display_array,2,rev))
image(
z = dispArr,col = gray.colors(100), xaxt = 'n',yaxt = 'n'
)
grid(
nx = display_cols,display_rows,col = 'black',lwd = 2,lty = 1
)
box()
par(op)
}
m <- dim(X)[1]
rand_indices <- sample(m)
sel <- X[rand_indices[1:100], ]
displayData(sel)
X[curr_ex, ]
curr_ex <- 1
X[curr_ex, ]
displayData(sel)
displayData  <- function(X, example_width = round(sqrt(dim(X)[2])))  {
#DISPLAYDATA Display 2D data in a nice grid
#   [h, display_array] <- DISPLAYDATA(X, example_width) displays 2D data
#   stored in X in a nice grid. It returns the figure handle h and the
#   displayed array if requested.
if (is.vector(X))
X <- t(X)
# Compute rows, cols
m <- dim(X)[1]
n <- dim(X)[2]
example_height <- (n / example_width) #20
# Compute number of items to display
display_rows <- floor(sqrt(m)) #10
display_cols <- ceiling(m / display_rows) #10
# Between images padding
pad <- 1
# Setup blank display
display_array <-
-matrix(0,pad + display_rows * (example_height + pad),
pad + display_cols * (example_width + pad))
# Copy each example into a patch on the display array
curr_ex <- 1
for (j in 1:display_rows) {
for (i in 1:display_cols) {
if (curr_ex > m)
break
# Copy the patch
# Get the max value of the patch
max_val <- max(abs(X[curr_ex,]))
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height),
pad + (i - 1) * (example_width + pad) + (1:example_width)] <-
matrix(X[curr_ex,], example_height, example_width) / max_val
curr_ex <- curr_ex + 1
}
if (curr_ex > m)
break
}
# Display Image
op <- par(bg = "gray")
#image draws by row from bottom up, but R indexes matrices by column, top down
dispArr <- t(apply(display_array,2,rev))
image(
z = dispArr,col = gray.colors(100), xaxt = 'n',yaxt = 'n'
)
grid(
nx = display_cols,display_rows,col = 'black',lwd = 2,lty = 1
)
box()
par(op)
}
displayData  <- function(X, example_width = round(sqrt(dim(X)[2])))  {
#DISPLAYDATA Display 2D data in a nice grid
#   [h, display_array] <- DISPLAYDATA(X, example_width) displays 2D data
#   stored in X in a nice grid. It returns the figure handle h and the
#   displayed array if requested.
if (is.vector(X))
X <- t(X)
# Compute rows, cols
m <- dim(X)[1]
n <- dim(X)[2]
example_height <- (n / example_width) #20
# Compute number of items to display
display_rows <- floor(sqrt(m)) #10
display_cols <- ceiling(m / display_rows) #10
# Between images padding
pad <- 1
# Setup blank display
display_array <-
-matrix(0,pad + display_rows * (example_height + pad),
pad + display_cols * (example_width + pad))
# Copy each example into a patch on the display array
curr_ex <- 1
print(curr_ex)
for (j in 1:display_rows) {
for (i in 1:display_cols) {
if (curr_ex > m)
break
# Copy the patch
# Get the max value of the patch
max_val <- max(abs(X[curr_ex,]))
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height),
pad + (i - 1) * (example_width + pad) + (1:example_width)] <-
matrix(X[curr_ex,], example_height, example_width) / max_val
curr_ex <- curr_ex + 1
}
if (curr_ex > m)
break
}
# Display Image
op <- par(bg = "gray")
#image draws by row from bottom up, but R indexes matrices by column, top down
dispArr <- t(apply(display_array,2,rev))
image(
z = dispArr,col = gray.colors(100), xaxt = 'n',yaxt = 'n'
)
grid(
nx = display_cols,display_rows,col = 'black',lwd = 2,lty = 1
)
box()
par(op)
}
displayData(sel)
max_val <- max(abs(X[curr_ex,]))
max_val
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height),
pad + (i - 1) * (example_width + pad) + (1:example_width)] <-
matrix(X[curr_ex,], example_height, example_width) / max_val
curr_ex <- curr_ex + 1
curr_ex>m
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height),
pad + (i - 1) * (example_width + pad) + (1:example_width)] <-
matrix(X[curr_ex,], example_height, example_width) / max_val
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height), pad + (i - 1) * (example_width + pad) + (1:example_width)] <- matrix(X[curr_ex,], example_height, example_width) / max_val
displayData  <- function(X, example_width = round(sqrt(dim(X)[2])))  {
#DISPLAYDATA Display 2D data in a nice grid
#   [h, display_array] <- DISPLAYDATA(X, example_width) displays 2D data
#   stored in X in a nice grid. It returns the figure handle h and the
#   displayed array if requested.
if (is.vector(X))
X <- t(X)
# Compute rows, cols
m <- dim(X)[1]
n <- dim(X)[2]
example_height <- (n / example_width) #20
# Compute number of items to display
display_rows <- floor(sqrt(m)) #10
display_cols <- ceiling(m / display_rows) #10
# Between images padding
pad <- 1
# Setup blank display
display_array <-
-matrix(0,pad + display_rows * (example_height + pad),
pad + display_cols * (example_width + pad))
# Copy each example into a patch on the display array
curr_ex <- 1
for (j in 1:display_rows) {
for (i in 1:display_cols) {
if (curr_ex > m)
break
# Copy the patch
# Get the max value of the patch
max_val <- max(abs(X[curr_ex,]))
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height), pad + (i - 1) * (example_width + pad) + (1:example_width)] <- matrix(X[curr_ex,], example_height, example_width) / max_val
curr_ex <- curr_ex + 1
}
if (curr_ex > m)
break
}
# Display Image
op <- par(bg = "gray")
#image draws by row from bottom up, but R indexes matrices by column, top down
dispArr <- t(apply(display_array,2,rev))
image(
z = dispArr,col = gray.colors(100), xaxt = 'n',yaxt = 'n'
)
grid(
nx = display_cols,display_rows,col = 'black',lwd = 2,lty = 1
)
box()
par(op)
}
m <- dim(X)[1]
rand_indices <- sample(m)
sel <- X[rand_indices[1:100], ]
displayData(sel)
matrix(X[curr_ex,], example_height, example_width) / max_val
example_height <- (n / example_width) #20
m <- dim(X)[1]
n <- dim(X)[2]
example_height <- (n / example_width) #20
example_width = round(sqrt(dim(X)[2]))
m <- dim(X)[1]
n <- dim(X)[2]
example_height <- (n / example_width) #20
display_rows <- floor(sqrt(m)) #10
display_cols <- ceiling(m / display_rows) #10
# Between images padding
pad <- 1
display_array <- -matrix(0,pad + display_rows * (example_height + pad), pad + display_cols * (example_width + pad))
curr_ex <- 1
for (j in 1:display_rows) {
for (i in 1:display_cols) {
if (curr_ex > m)
break
# Copy the patch
# Get the max value of the patch
max_val <- max(abs(X[curr_ex,]))
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height), pad + (i - 1) * (example_width + pad) + (1:example_width)] <- matrix(X[curr_ex,], example_height, example_width) / max_val
curr_ex <- curr_ex + 1
}
if (curr_ex > m)
break
}
matrix(X[curr_ex,], example_height, example_width) / max_val
matrix(X[curr_ex,], example_height, example_width)
max_val
str(matrix(X[curr_ex,], example_height, example_width))
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height), pad + (i - 1) * (example_width + pad) + (1:example_width)] <- matrix(unlist(X[curr_ex,]), example_height, example_width) / max_val
displayData  <- function(X, example_width = round(sqrt(dim(X)[2])))  {
#DISPLAYDATA Display 2D data in a nice grid
#   [h, display_array] <- DISPLAYDATA(X, example_width) displays 2D data
#   stored in X in a nice grid. It returns the figure handle h and the
#   displayed array if requested.
if (is.vector(X))
X <- t(X)
# Compute rows, cols
m <- dim(X)[1]
n <- dim(X)[2]
example_height <- (n / example_width) #20
# Compute number of items to display
display_rows <- floor(sqrt(m)) #10
display_cols <- ceiling(m / display_rows) #10
# Between images padding
pad <- 1
# Setup blank display
display_array <- -matrix(0,pad + display_rows * (example_height + pad), pad + display_cols * (example_width + pad))
# Copy each example into a patch on the display array
curr_ex <- 1
for (j in 1:display_rows) {
for (i in 1:display_cols) {
if (curr_ex > m)
break
# Copy the patch
# Get the max value of the patch
max_val <- max(abs(X[curr_ex,]))
display_array[pad + (j - 1) * (example_height + pad) + (1:example_height), pad + (i - 1) * (example_width + pad) + (1:example_width)] <- matrix(unlist(X[curr_ex,]), example_height, example_width) / max_val
curr_ex <- curr_ex + 1
}
if (curr_ex > m)
break
}
# Display Image
op <- par(bg = "gray")
#image draws by row from bottom up, but R indexes matrices by column, top down
dispArr <- t(apply(display_array,2,rev))
image(
z = dispArr,col = gray.colors(100), xaxt = 'n',yaxt = 'n'
)
grid(
nx = display_cols,display_rows,col = 'black',lwd = 2,lty = 1
)
box()
par(op)
}
m <- dim(X)[1]
rand_indices <- sample(m)
sel <- X[rand_indices[1:100], ]
displayData(sel)
str(display_array)
str(display_rows)
str(display_cols)
sel <- X[rand_indices, ]
size <- sqrt(ncol(X))
par(mfrow=c(1, 1))
plotDigits <- function(X) {
vec <- unlist(X)
m <- matrix(vec, nrow = size, ncol = size, byrow = TRUE)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
}
plotDigits(X[4065,])
sel <- X[rand_indices, ]
plotDigits(X[4065,])
plotDigits(X[4000,])
plotDigits(X[400,])
plotDigits(X[3000,])
plotDigits(X[3010,])
plotDigits <- function(X) {
vec <- unlist(X)
m <- matrix(vec, nrow = size, ncol = size, byrow = TRUE)
image(t(m), axes = FALSE, col = grey(seq(0, 1, length = 256)))
}
plotDigits(X[3010,])
plotDigits <- function(X) {
vec <- unlist(X)
m <- matrix(vec, nrow = size, ncol = size, byrow = TRUE)
image(rev(m), axes = FALSE, col = grey(seq(0, 1, length = 256)))
}
plotDigits(X[3010,])
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
plotDigits <- function(X) {
vec <- unlist(X)
m <- matrix(vec, nrow = size, ncol = size, byrow = TRUE)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
}
plotDigits(X[3010,])
plotDigits(X[3012,])
plotDigits(X[3015,])
rotate <- function(x) t(apply(x, 2, rev))
plotDigits <- function(X) {
vec <- unlist(X)
m <- matrix(vec, nrow = size, ncol = size, byrow = TRUE)
image(rotate(m), axes = FALSE, col = grey(seq(0, 1, length = 256)))
}
plotDigits(X[3015,])
plotDigits <- function(X) {
vec <- unlist(X)
m <- matrix(vec, nrow = size, ncol = size, byrow = TRUE)
image(rotate(t(m)), axes = FALSE, col = grey(seq(0, 1, length = 256)))
}
plotDigits(X[3015,])
plotDigits(X[4500,])
plotDigits(X[4508,])
plotDigits(X[4503,])
aux <- X[1,]
length(aux)
aux[250:270]
par(mfrow=c(2,3))
index <- sample(5000, 6)
ll <- lapply(index,
function(x) image(
rotate(matrix(unlist(X[x,]),nrow = 20, byrow = TRUE)),
col=grey.colors(255),
xlab=y[x], axes = FALSE
)
)
ll <- lapply(index,
function(x) image(
rotate(t(matrix(unlist(X[x,])),nrow = 20, byrow = TRUE)),
col=grey.colors(255),
xlab=y[x], axes = FALSE
)
)
ll <- lapply(index,
function(x) image(
rotate(t(matrix(unlist(X[x,])))),nrow = 20, byrow = TRUE)),
col=grey.colors(255),
xlab=y[x], axes = FALSE
ll <- lapply(index,
function(x) image(
rotate(t(matrix(unlist(X[x,]))),nrow = 20, byrow = TRUE)),
col=grey.colors(255),
xlab=y[x], axes = FALSE
)
X<-sel
par(mfrow=c(2,3))
index <- sample(5000, 6)
ll <- lapply(index,
function(x) image(
rotate(t(matrix(unlist(X[x,]))),nrow = 20, byrow = TRUE)),
col=grey.colors(255),
xlab=y[x], axes = FALSE
)
index <- sample(5000, 6)
ll <- lapply(index,
function(x) image(
rotate(t(matrix(unlist(X[x,]))),nrow = 20, byrow = TRUE)),
col=grey.colors(255),
xlab=y[x], axes = FALSE
)
ll <- lapply(index,
function(x) image(rotate(t(matrix(unlist(X[x,]),nrow = 20, byrow = TRUE))), col=grey.colors(255), xlab=y[x], axes = FALSE)
)
invisible(lapply(ll, print))
par(mfrow=c(1,1)) # set plot options back to default
ll <- lapply(index,
function(x) image(rotate(t(matrix(unlist(X[x,]),nrow = 20, byrow = TRUE))), col=grey.colors(255), xlab=y[x], axes = FALSE)
)
invisible(lapply(ll, print))
index
X <- df[,1:400]
y <- df[, 401]
m <- nrow(X)
rand_indices <- sample(m, 1)
sel <- X[rand_indices, ]
size <- sqrt(ncol(X))
par(mfrow=c(1, 1))
rotate <- function(x) t(apply(x, 2, rev))
plotDigits <- function(X) {
vec <- unlist(X)
m <- matrix(vec, nrow = size, ncol = size, byrow = TRUE)
image(rotate(t(m)), axes = FALSE, col = grey(seq(0, 1, length = 256)))
}
plotDigits(X[4503,])
ll[[1]]
[[2]]
ll[[2]]
ll[2]
plotDigits(sel)
ll <- lapply(index,
function(x) image(rotate(t(matrix(unlist(X[x,]),nrow = 20, byrow = TRUE))), col=grey.colors(255), xlab=y[x], axes = FALSE)
)
invisible(lapply(ll, print))
ll
png(ll)
theta <- c(3, 4, 5)
theta ^2
sum(theta^2)
theta * t(theta)
theta %*% t(theta)
dim(theta)
theta
theta %*% theta
theta ^2
theta .^2
theta %^% 2
mat <- matrix(sample(100, 10), 5, 2)
mat
mat <- matrix(sample(100, 10), 2, 5)
which.max(mat)
mat
colMax(mat)
which.max( mat[,2] )
y <- matrix
y[,col(y)[y==max(y)]]
y <- mat
y[,col(y)[y==max(y)]]
p <- apply(mat,1,which.max)
mat
p
computeValue <- function(x) {
function(x) {
x ^ 2
}
function(x) {
x * 10
}
}
computeValue(2)
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=100)
setwd("D:/Google Drive/portfolio/kaggle/digit-recognizer")
library(mxnet)
train <- read.csv('data/train.csv', header=TRUE)
test <- read.csv('data/test.csv', header=TRUE)
train <- data.matrix(train)
test <- data.matrix(test)
train.x <- train[,-1]
train.y <- train[,1]
train.x <- t(train.x/255)
test <- t(test/255)
table(train.y)
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=100)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=50)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=25)
act3 <- mx.symbol.Activation(fc3, name="relu3", act_type="relu")
fc4 <- mx.symbol.FullyConnected(act3, name="fc4", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc4, name="sm")
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=train.x, y=train.y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
preds <- predict(model, test)
dim(preds)
pred.label <- max.col(t(preds)) - 1
table(pred.label)
submission <- data.frame(ImageId=1:ncol(test), Label=pred.label)
write.csv(submission, file='submission.csv', row.names=FALSE,  quote=FALSE)
